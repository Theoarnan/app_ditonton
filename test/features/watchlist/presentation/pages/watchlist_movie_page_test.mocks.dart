// Mocks generated by Mockito 5.4.1 from annotations
// in app_ditonton/test/features/watchlist/presentation/pages/watchlist_movie_page_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i9;

import 'package:app_ditonton/common/state_enum.dart' as _i7;
import 'package:app_ditonton/domain/entities/movie.dart' as _i5;
import 'package:app_ditonton/features/tvseries/domain/entities/tv.dart' as _i6;
import 'package:app_ditonton/features/watchlist/domain/usecases/get_watchlist_movies.dart'
    as _i2;
import 'package:app_ditonton/features/watchlist/domain/usecases/get_watchlist_tv.dart'
    as _i3;
import 'package:app_ditonton/features/watchlist/presentation/provider/watchlist_notifier.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetWatchlistMovies_0 extends _i1.SmartFake
    implements _i2.GetWatchlistMovies {
  _FakeGetWatchlistMovies_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWatchlistTv_1 extends _i1.SmartFake
    implements _i3.GetWatchlistTv {
  _FakeGetWatchlistTv_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WatchlistNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistNotifier extends _i1.Mock implements _i4.WatchlistNotifier {
  MockWatchlistNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetWatchlistMovies get getWatchlistMovies => (super.noSuchMethod(
        Invocation.getter(#getWatchlistMovies),
        returnValue: _FakeGetWatchlistMovies_0(
          this,
          Invocation.getter(#getWatchlistMovies),
        ),
      ) as _i2.GetWatchlistMovies);
  @override
  _i3.GetWatchlistTv get getWatchlistTv => (super.noSuchMethod(
        Invocation.getter(#getWatchlistTv),
        returnValue: _FakeGetWatchlistTv_1(
          this,
          Invocation.getter(#getWatchlistTv),
        ),
      ) as _i3.GetWatchlistTv);
  @override
  List<_i5.Movie> get watchlistMovies => (super.noSuchMethod(
        Invocation.getter(#watchlistMovies),
        returnValue: <_i5.Movie>[],
      ) as List<_i5.Movie>);
  @override
  List<_i6.Tv> get watchlistTv => (super.noSuchMethod(
        Invocation.getter(#watchlistTv),
        returnValue: <_i6.Tv>[],
      ) as List<_i6.Tv>);
  @override
  _i7.RequestState get watchlistState => (super.noSuchMethod(
        Invocation.getter(#watchlistState),
        returnValue: _i7.RequestState.empty,
      ) as _i7.RequestState);
  @override
  String get message => (super.noSuchMethod(
        Invocation.getter(#message),
        returnValue: '',
      ) as String);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i8.Future<void> fetchWatchlistMovies() => (super.noSuchMethod(
        Invocation.method(
          #fetchWatchlistMovies,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> fetchWatchlistTv() => (super.noSuchMethod(
        Invocation.method(
          #fetchWatchlistTv,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
