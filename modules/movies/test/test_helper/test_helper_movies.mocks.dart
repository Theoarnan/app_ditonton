// Mocks generated by Mockito 5.4.1 from annotations
// in movies/test/test_helper/test_helper_movies.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:io' as _i9;

import 'package:core/core.dart' as _i7;
import 'package:dartz/dartz.dart' as _i3;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/data/models/movie_detail_model.dart' as _i4;
import 'package:movies/data/models/movie_model.dart' as _i13;
import 'package:movies/domain/entities/movie.dart' as _i10;
import 'package:movies/domain/entities/movie_detail.dart' as _i11;
import 'package:movies/domain/repositories/movie_repository.dart' as _i5;
import 'package:movies/movies.dart' as _i12;
import 'package:watchlist/domain/repositories/watchlist_repository.dart' as _i6;
import 'package:watchlist/domain/usecases/get_watchlist_status.dart' as _i14;
import 'package:watchlist/domain/usecases/remove_watchlist_movie.dart' as _i16;
import 'package:watchlist/domain/usecases/save_watchlist_movie.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieDetailResponse_2 extends _i1.SmartFake
    implements _i4.MovieDetailResponse {
  _FakeMovieDetailResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieRepository_3 extends _i1.SmartFake
    implements _i5.MovieRepository {
  _FakeMovieRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWatchlistRepository_4 extends _i1.SmartFake
    implements _i6.WatchlistRepository {
  _FakeWatchlistRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteHelper extends _i1.Mock implements _i7.RemoteHelper {
  MockRemoteHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i9.HttpClient?> get apiClient => (super.noSuchMethod(
        Invocation.getter(#apiClient),
        returnValue: _i8.Future<_i9.HttpClient?>.value(),
      ) as _i8.Future<_i9.HttpClient?>);
  @override
  _i8.Future<_i2.Response> get(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
        ),
        returnValue: _i8.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
          ),
        )),
      ) as _i8.Future<_i2.Response>);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i5.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>> getNowPlayingMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNowPlayingMovies,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.Movie>>(
          this,
          Invocation.method(
            #getNowPlayingMovies,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>);
  @override
  _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>> getPopularMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.Movie>>(
          this,
          Invocation.method(
            #getPopularMovies,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>);
  @override
  _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>> getTopRatedMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopRatedMovies,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.Movie>>(
          this,
          Invocation.method(
            #getTopRatedMovies,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>);
  @override
  _i8.Future<_i3.Either<_i7.Failure, _i11.MovieDetail>> getMovieDetail(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetail,
          [id],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i7.Failure, _i11.MovieDetail>>.value(
                _FakeEither_1<_i7.Failure, _i11.MovieDetail>(
          this,
          Invocation.method(
            #getMovieDetail,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i7.Failure, _i11.MovieDetail>>);
  @override
  _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>> getMovieRecommendations(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieRecommendations,
          [id],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.Movie>>(
          this,
          Invocation.method(
            #getMovieRecommendations,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>);
  @override
  _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>> searchMovies(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [query],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.Movie>>(
          this,
          Invocation.method(
            #searchMovies,
            [query],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>);
}

/// A class which mocks [MovieRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteDataSource extends _i1.Mock
    implements _i12.MovieRemoteDataSource {
  MockMovieRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i13.MovieModel>> getNowPlayingMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNowPlayingMovies,
          [],
        ),
        returnValue:
            _i8.Future<List<_i13.MovieModel>>.value(<_i13.MovieModel>[]),
      ) as _i8.Future<List<_i13.MovieModel>>);
  @override
  _i8.Future<List<_i13.MovieModel>> getPopularMovies() => (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [],
        ),
        returnValue:
            _i8.Future<List<_i13.MovieModel>>.value(<_i13.MovieModel>[]),
      ) as _i8.Future<List<_i13.MovieModel>>);
  @override
  _i8.Future<List<_i13.MovieModel>> getTopRatedMovies() => (super.noSuchMethod(
        Invocation.method(
          #getTopRatedMovies,
          [],
        ),
        returnValue:
            _i8.Future<List<_i13.MovieModel>>.value(<_i13.MovieModel>[]),
      ) as _i8.Future<List<_i13.MovieModel>>);
  @override
  _i8.Future<_i4.MovieDetailResponse> getMovieDetail(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetail,
          [id],
        ),
        returnValue: _i8.Future<_i4.MovieDetailResponse>.value(
            _FakeMovieDetailResponse_2(
          this,
          Invocation.method(
            #getMovieDetail,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.MovieDetailResponse>);
  @override
  _i8.Future<List<_i13.MovieModel>> getMovieRecommendations(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieRecommendations,
          [id],
        ),
        returnValue:
            _i8.Future<List<_i13.MovieModel>>.value(<_i13.MovieModel>[]),
      ) as _i8.Future<List<_i13.MovieModel>>);
  @override
  _i8.Future<List<_i13.MovieModel>> searchMovies(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [query],
        ),
        returnValue:
            _i8.Future<List<_i13.MovieModel>>.value(<_i13.MovieModel>[]),
      ) as _i8.Future<List<_i13.MovieModel>>);
}

/// A class which mocks [GetMovieDetail].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieDetail extends _i1.Mock implements _i12.GetMovieDetail {
  MockGetMovieDetail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.MovieRepository);
  @override
  _i8.Future<_i3.Either<_i7.Failure, _i11.MovieDetail>> execute(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i7.Failure, _i11.MovieDetail>>.value(
                _FakeEither_1<_i7.Failure, _i11.MovieDetail>(
          this,
          Invocation.method(
            #execute,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i7.Failure, _i11.MovieDetail>>);
}

/// A class which mocks [GetMovieRecommendations].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieRecommendations extends _i1.Mock
    implements _i12.GetMovieRecommendations {
  MockGetMovieRecommendations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.MovieRepository);
  @override
  _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>> execute(dynamic id) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.Movie>>(
          this,
          Invocation.method(
            #execute,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>);
}

/// A class which mocks [GetWatchListStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatus extends _i1.Mock
    implements _i14.GetWatchListStatus {
  MockGetWatchListStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.WatchlistRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeWatchlistRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.WatchlistRepository);
  @override
  _i8.Future<bool> execute(int? id) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [SaveWatchlistMovie].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlistMovie extends _i1.Mock
    implements _i15.SaveWatchlistMovie {
  MockSaveWatchlistMovie() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.WatchlistRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeWatchlistRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.WatchlistRepository);
  @override
  _i8.Future<_i3.Either<_i7.Failure, String>> execute(
          _i11.MovieDetail? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [movie],
        ),
        returnValue: _i8.Future<_i3.Either<_i7.Failure, String>>.value(
            _FakeEither_1<_i7.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [movie],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i7.Failure, String>>);
}

/// A class which mocks [RemoveWatchlistMovie].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlistMovie extends _i1.Mock
    implements _i16.RemoveWatchlistMovie {
  MockRemoveWatchlistMovie() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.WatchlistRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeWatchlistRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.WatchlistRepository);
  @override
  _i8.Future<_i3.Either<_i7.Failure, String>> execute(
          _i11.MovieDetail? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [movie],
        ),
        returnValue: _i8.Future<_i3.Either<_i7.Failure, String>>.value(
            _FakeEither_1<_i7.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [movie],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i7.Failure, String>>);
}

/// A class which mocks [GetNowPlayingMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNowPlayingMovies extends _i1.Mock
    implements _i12.GetNowPlayingMovies {
  MockGetNowPlayingMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.MovieRepository);
  @override
  _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.Movie>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>);
}

/// A class which mocks [GetPopularMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularMovies extends _i1.Mock implements _i12.GetPopularMovies {
  MockGetPopularMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.MovieRepository);
  @override
  _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.Movie>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>);
}

/// A class which mocks [GetTopRatedMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedMovies extends _i1.Mock implements _i12.GetTopRatedMovies {
  MockGetTopRatedMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.MovieRepository);
  @override
  _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.Movie>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i7.Failure, List<_i10.Movie>>>);
}
